---
import About from "@/components/token/About.astro";
import Chart from "@/components/token/Chart.astro";
import Hero from "@/components/token/Hero.astro";
import Platforms from "@/components/token/Platforms.astro";
import Roadmap from "@/components/token/Roadmap.astro";
import Layout from "@/layouts/Layout.astro";
import { changeLanguage } from "i18next";

changeLanguage("ko");
---

<Layout
  title="FingeRate | Trade MSOT Token"
  description="Navigate FingeRate ecosystem safely with MSOT token; an ERC-20 & Polygon based cryptocurrency that unlocks benefits and advantages. Start trading MSOT now!"
>
  <div class="space-y-12 pb-12 md:space-y-28 md:pb-24">
    <Hero />
    <Platforms />
    <Chart />
    <About />
    <!-- <Roadmap /> -->
  </div>
</Layout>

<script>
  import * as echarts from 'echarts/core'
  import { LineChart } from 'echarts/charts'
  import { SVGRenderer } from 'echarts/renderers'
  import { TooltipComponent, GridComponent } from 'echarts/components'
  echarts.use([LineChart, SVGRenderer, TooltipComponent, GridComponent])
  const $chart = echarts.init(document.querySelector('#chart') as HTMLDivElement, 'dark', { renderer: 'svg' })
  const $tokenPrice = document.querySelector('#token-price') as HTMLElement

  const formatNumber = (num: number, options?: Intl.NumberFormatOptions) =>
    new Intl.NumberFormat('en-us', {
      notation: 'compact',
      currency: 'USD',
      style: 'currency',
      maximumFractionDigits: 4,
      ...options,
    }).format(num)

  const setHtml = (num: number) => {
    const formattedNum = formatNumber(num)
    const first = formattedNum.slice(0, 5)
    const second = formattedNum.slice(5)
    $tokenPrice.innerHTML = `${first}<span class='text-slate-600'>${second}</span>`
    $tokenPrice.classList.remove('animate-pulse')
  }

  const updateNumber = (num: number) => {
    if (document?.startViewTransition) {
      document.startViewTransition(() => {
        setHtml(num)
      })
    } else {
      setHtml(num)
    }
  }

  const getData = async () => {
    try {
      const res = await fetch(
        'https://api.coingecko.com/api/v3/coins/btour-chain/market_chart?vs_currency=usd&days=30&interval=daily'
      )
      const { prices } = (await res.json()) as { prices: [number, number][] }

      updateNumber(prices.at(-1)?.[1] ?? 0.06)

      if (!prices) return

      let timePoints = []
      let pricePoints = []
      let minPrice = prices[0][1]
      let maxPrice = prices[0][1]

      for (const [time, price] of prices) {
        timePoints.push(new Date(time).toLocaleDateString())
        pricePoints.push(price.toFixed(4))
        minPrice = Math.min(minPrice, price)
        maxPrice = Math.max(maxPrice, price)
      }
      $chart.setOption({
        tooltip: {
          trigger: 'axis',
        },
        xAxis: {
          type: 'category',
          data: timePoints,
          axisLabel: {
            align: 'center',
          },
        },
        yAxis: {
          type: 'value',
          min: (minPrice * 0.875).toFixed(2),
          max: (maxPrice * 1.125).toFixed(2),
          axisLabel: {
            formatter: '${value}',
            align: 'right',
          },
        },
        series: [
          {
            data: pricePoints,
            type: 'line',
          },
        ],
        grid: {
          top: '40',
          right: '40',
          bottom: '50',
          left: '80',
        },
      })
    } catch (err) {
      console.error(err)
    }
  }

  getData()

  window.addEventListener('resize', function () {
    $chart.resize()
  })
</script>
