---
import Layout from "@layouts/Layout.astro";
import { founders, mainTeam } from "@data/team/exports";
import ceoSpeech from "@assets/team/ceo-speech.webp";
import { Image, getImage } from "astro:assets";
import Person from "@components/Person.astro";
import i18next, { changeLanguage } from "i18next";

changeLanguage("ko");

const lang = i18next.language as "en" | "ko";
const photos: ImageMetadata[] = await Astro.glob("../../assets/team/photos/**/*.{png,webp}").then((files) => files.map((f) => f.default));
const optimizedPhotos = await Promise.all(photos.map((p) => getImage({ src: p, format: "webp", quality: "high" })));
type PersonJSON = {
    name: {
        en: string;
        ko?: string;
    };
    subtitles: {
        en: string[];
        ko?: string[];
    };
    bio?: {
        en?: string;
        ko?: string;
    };
    socials?: string[];
    titles?: {
        en?: string[];
        ko?: string[];
    };
    articles?: {
        href: string;
        title: string;
    }[];
};
const formatPerson = (person: PersonJSON): Person => {
    return {
        ...person,
        name: person.name[lang] || person.name.en,
        subtitles: person.subtitles[lang] || person.subtitles.en,
        bio: person.bio?.[lang] || person.bio?.en,
        titles: person.titles?.[lang] || person.titles?.en,
    };
};
const getOptimizedPhoto = (name: string) => {
    return optimizedPhotos.find(({ options: { src } }) => {
        if (typeof src === "string") {
            return src.includes(name);
        }
        return src.src.includes(name);
    });
};
const delays: Record<number, string> = {
    0: "lg:delay-0",
    1: "lg:delay-100",
    2: "lg:delay-200",
    3: "lg:delay-300",
};
---

<Layout title='Team'>
  <div class='pb-12 md:pb-24'>
    <section class='mx-auto grid min-h-[70vh] max-w-screen-xl items-center p-2'>
      <div class='grid items-center gap-4 sm:grid-cols-2'>
        <Image
          src={ceoSpeech}
          alt='CEO of GG56 giving speech to the GG56 Founder, team and advisors'
          class='block max-h-[350px] -scale-x-100 rounded-lg object-cover sm:order-2'
        />
        <div>
          <h1 class='brand-text text-3xl font-bold leading-loose drop-shadow-[0_0_8px_#000]'>Our Team</h1>
          <p class='max-w-[60ch]'>
            Welcome to the FingeRate team page, where you can get to know the dedicated and passionate individuals
            behind our revolutionary survey platform. Our team consists of experts from diverse fields, including
            blockchain technology and software development, among others. We are united in our commitment to leveraging
            the power of the metaverse to provide our users with an engaging and rewarding survey experience.
          </p>
        </div>
      </div>
    </section>
    <section class='mx-auto max-w-screen-lg p-2 text-center'>
      <ul class='flex flex-wrap justify-center gap-2'>
        {
          founders.map((p) => {
            const personInfo = formatPerson(p);
            const photo = getOptimizedPhoto(p.name.en);
            return (
              <li
                data-scroll-animation
                data-person={JSON.stringify({
                  ...personInfo,
                  photo: { src: photo?.src, attributes: photo?.attributes },
                })}
                class='w-[calc(50%-0.5rem)] min-w-[140px] sm:w-[calc(33.33%-0.5rem)] md:w-[calc(25%-0.5rem)] '
              >
                <Person person={personInfo} photo={photo} />
              </li>
            );
          })
        }
      </ul>
      <hr data-scroll-animation class='my-4' />
      <ul class='flex flex-wrap justify-center gap-2'>
        {
          mainTeam.map((p, i) => {
            const personInfo = formatPerson(p);
            const photo = getOptimizedPhoto(p.name.en);

            return (
              <li
                data-scroll-animation
                data-person={JSON.stringify({
                  ...personInfo,
                  photo: { src: photo?.src, attributes: photo?.attributes },
                })}
                class={`${
                  delays[i % 4]
                } w-[calc(50%-0.5rem)] min-w-[140px] sm:w-[calc(33.33%-0.5rem)] md:w-[calc(25%-0.5rem)]`}
              >
                <Person person={personInfo} photo={photo} />
              </li>
            );
          })
        }
      </ul>
    </section>
  </div>
</Layout>

<dialog
  data-modal
  inert
  class='pointer-events-none fixed inset-0 block max-w-[calc((100%-6px)-2em)] rounded-lg bg-slate-800 opacity-0 transition backdrop:bg-slate-900/50 open:pointer-events-auto open:opacity-100'
>
  <button type='button' id='close-modal' class='absolute right-2 top-2'>
    <span class='sr-only'>close modal</span>
    <svg
      xmlns='http://www.w3.org/2000/svg'
      fill='none'
      viewBox='0 0 24 24'
      stroke-width='1.5'
      stroke='currentColor'
      class='h-6 w-6'
    >
      <path stroke-linecap='round' stroke-linejoin='round' d='M6 18L18 6M6 6l12 12'></path>
    </svg>
  </button>
  <div id='dialog-content' class='grid max-w-screen-md items-center gap-2 md:grid-cols-[auto_1fr] md:gap-4'></div>
</dialog>

<template>
  <div id='person-info' class='grid items-center justify-center gap-2 self-start'>
    <img loading='lazy' decoding='async' />
    <div class='text-center'>
      <b></b>
      <ul class='text-sm text-cyberLilac'></ul>
    </div>
  </div>
  <div class='space-y-4' id='person-bio'></div>
</template>

<script>
  // TODO: type photo as GetImageResult
  type Person = globalThis.Person & { photo: any };

  const personCards = document.querySelectorAll<HTMLLIElement>('[data-person]');
  const dialog = document.querySelector('dialog')!;
  const dialogTemplate = document.querySelector('template')!;
  const dialogContent = dialog.querySelector('#dialog-content') as HTMLDivElement;
  const closeBtn = document.querySelector('#close-modal') as HTMLButtonElement;

  personCards.forEach((card) => {
    if (!card.dataset.person) return;
    const personInfo = JSON.parse(card.dataset.person) as Person;
    const hasExtraInfo = !!personInfo.bio || !!personInfo.titles || !!personInfo.articles;
    if (hasExtraInfo) {
      card.addEventListener('click', ({ target }) => {
        if (target instanceof HTMLElement) {
          if ('profilePhoto' in target.dataset || 'profileInfoBtn' in target.dataset) {
            addInfoToModal(personInfo);
            openModal();
          }
        }
      });
    }
  });

  const openModal = () => {
    dialog.showModal();
    dialog.removeAttribute('inert');
  };

  const closeModal = () => {
    dialog.close();
    dialog.setAttribute('inert', '');
  };

  const addInfoToModal = (person: Person) => {
    dialogContent.replaceChildren();
    dialogContent.appendChild(dialogTemplate.content.cloneNode(true));

    const personInfo = dialogContent.querySelector('#person-info') as HTMLDivElement;
    const personBio = dialogContent.querySelector('#person-bio') as HTMLDivElement;

    personInfo.querySelector('b')!.textContent = person.name;

    const photo = personInfo.querySelector('img')!;

    photo.src = person.photo.src;
    photo.alt = `Portrait of ${person.name}`;
    Object.entries(person.photo.attributes).forEach(([key, val]) => photo.setAttribute(key, val as string));

    const subtitles = personInfo.querySelector('ul')!;
    person.subtitles.forEach((st: string) => {
      const li = document.createElement('li');
      li.textContent = st;
      subtitles.appendChild(li);
    });

    // TODO: add social buttons to person info modal
    // if (person.socials) {
    //   const ul = document.createElement('ul');
    //   person.socials.forEach((s) => {
    //     const li = document.createElement('li')
    //     const a = document.createElement('a')
    //     const img = document.createElement('img')

    //     img.src =
    //   })
    // }

    if (person.titles) {
      const ul = document.createElement('ul');
      ul.classList.add('font-bold');
      person.titles.forEach((t: string) => {
        const li = document.createElement('li');
        li.textContent = t;
        ul.appendChild(li);
      });
      personBio.appendChild(ul);
    }

    if (person.bio) {
      const p = document.createElement('p');
      p.classList.add('border-l', 'pl-2', 'text-sm');
      p.textContent = person.bio;
      personBio.appendChild(p);
    }

    // TODO: add articles
  };

  closeBtn.addEventListener('click', closeModal);

  dialog.addEventListener('click', ({ target }) => {
    if ((target as HTMLDialogElement).nodeName === 'DIALOG') closeModal();
  });
</script>
