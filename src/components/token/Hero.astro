---
import { DOWNLOAD_LINK } from '@/constants';
import token from '@assets/token/msot.webp';
import { Image } from 'astro:assets';

const formatNumber = (num: number, options?: Intl.NumberFormatOptions) =>
  new Intl.NumberFormat('en-us', { notation: 'compact', maximumFractionDigits: 4, ...options }).format(num);
---

<section class='mx-auto grid min-h-[70vh] max-w-screen-lg content-center items-center gap-8 px-2 py-12 md:grid-cols-2'>
  <div class='text-center md:text-left'>
    <h1 class=' text-4xl font-bold md:text-6xl/[1.3]'>
      Navigate FingeRate Ecosystem with MSOT
    </h1>
  </div>
  <div class='space-y-6'>
    <div class='flex gap-8 rounded-full bg-slate-950/80 p-2'>
      <Image src={token} alt='MSOT token logo' class='h-24 w-24' />
      <dl class='flex flex-1 items-center justify-around gap-8 pr-8'>
        <div class='flex flex-col-reverse flex-wrap gap-2'>
          <dt>Quantity</dt>
          <dd class='md:text-4xl text-3xl font-bold'>{formatNumber(1_800_000_000)}</dd>
        </div>
        <div class='flex flex-col-reverse gap-2'>
          <dt>Price</dt>
          <dd id='token-price' class='animate-pulse md:text-4xl text-3xl font-bold'>
            {formatNumber(0.0000, { currency: 'USD', style: 'currency' })}
          </dd>
        </div>
      </dl>
    </div>
    <p class='text-center text-lg'>
      
      Take full advantage of the FingeRate ecosystem! Download the <a  href={DOWNLOAD_LINK} class='text-neonBlue underline' target="_blank" rel="noopener noreferrer">App</a>,
      earn rewards, and trade MSOT on Latoken
    </p>
    <a
      class='flex rounded-full border-2 border-intelligentBlue p-2 text-lg font-medium transition hover:bg-intelligentBlue focus:bg-intelligentBlue'
      href='https://latoken.com/exchange/MSOT_BTC'
      target='_blank'
      rel='noopener noreferrer'
      ><span class='px-4 [text-wrap:balance;]'>Go to the marketplace to trade MSOT</span><span
        class='ml-auto inline-grid place-items-center rounded-full bg-intelligentBlue px-4 leading-none'>&rarr;</span
      ></a
    >
  </div>
  <section class="md:col-span-2 rounded-lg overflow-hidden">
    <div id='chart' class='aspect-[0.75/1] sm:aspect-[1.5/1] md:aspect-[3/1]'></div>
  </section>
</section>

<script>
    import * as echarts from 'echarts'
  const $chart = echarts.init(document.querySelector('#chart') as HTMLDivElement, 'dark', {renderer: 'svg'})
  const $tokenPrice = document.querySelector('#token-price') as HTMLElement;


   const formatNumber = (num: number, options?: Intl.NumberFormatOptions) =>
    new Intl.NumberFormat('en-us', { notation: 'compact', currency: 'USD',style: 'currency', maximumFractionDigits: 4, ...options }).format(num);

    const setHtml = (num: number) => {
      const formattedNum = formatNumber(num)
      const first = formattedNum.slice(0,5)
      const second = formattedNum.slice(5)
      $tokenPrice.innerHTML = `${first}<span class='text-slate-600'>${second}</span>`
      $tokenPrice.classList.remove('animate-pulse')
    }

  const updateNumber = (num: number) => {
    if (document?.startViewTransition) {
      document.startViewTransition(() => {
        setHtml(num)
      });
    } else {
      setHtml(num)
    }
  };

  const getData = async () => {
    try {
      const res = await fetch('https://api.coingecko.com/api/v3/coins/btour-chain/market_chart?vs_currency=usd&days=30&interval=daily')
      const {prices} = await res.json() as {prices: [number,number][]}

      updateNumber(prices.at(-1)?.[1] ?? 0.06)

      if (!prices) return

      let timePoints = []
      let pricePoints = []
      let minPrice = prices[0][1]
      let maxPrice = prices[0][1]

      for (const [time,price] of prices) {
        timePoints.push(new Date(time).toLocaleDateString())
        pricePoints.push(price.toFixed(4))
        minPrice = Math.min(minPrice, price)
        maxPrice = Math.max(maxPrice, price)
      }
        $chart.setOption({
           tooltip: {
    trigger: 'axis'
  },
    xAxis: {
      type: 'category',
      data: timePoints,
      axisLabel: {
      align: 'center'}
    },
    yAxis: {
      type: 'value',
      min: (minPrice * 0.875).toFixed(2),
      max: (maxPrice * 1.125).toFixed(2),
       axisLabel: {
      formatter: '${value}',
      align: 'right'}
    },
    series: [
      {
        data: pricePoints,
        type: 'line',
      }
    ],
    grid: {
      top: '40',
      right: '40',
      bottom: '50',
    left: '80',
  }
  })
    } catch (err) {
      console.error(err)
    }
  }

  getData()

   window.addEventListener('resize', function() {
    $chart.resize();
  });
  
</script>
