---
import { NAV_LINKS, type Link } from '../constants';
import i18next,{t} from 'i18next'
import { localizePath  } from "astro-i18next";

type Dropdown = { name: string; href?: string; links: Link[] };

const navLinks: Array<Link | Dropdown> = [
  {...NAV_LINKS.HOME, href: localizePath(NAV_LINKS.HOME.href)},
  {
    name: 'Ecosystem',
    links: [{...NAV_LINKS.BOT, href: localizePath(NAV_LINKS.BOT.href)}, {...NAV_LINKS.TOKEN, href: localizePath(NAV_LINKS.TOKEN.href)}],
  },
  {
    name: 'About',
    links: [{...NAV_LINKS.NEWS, href: localizePath(NAV_LINKS.NEWS.href)},{...NAV_LINKS.TEAM, href: localizePath(NAV_LINKS.TEAM.href)},],
  },
  {
    name: 'Support',
    links: [
      // {...NAV_LINKS.GUIDE, href: localizePath(NAV_LINKS.GUIDE.href)},
      {...NAV_LINKS.FAQ, href: localizePath(NAV_LINKS.FAQ.href)}, {...NAV_LINKS.CONTACT, href: localizePath(NAV_LINKS.CONTACT.href)}]
  },
  NAV_LINKS.WHITEPAPER,
];

const currentUrl = import.meta.env.DEV
  ? Astro.url.pathname
  : Astro.url.pathname === '/'
  ? '/'
  : Astro.url.pathname.slice(0, -1);
---

<header class='sticky top-0 z-20 bg-slate-950/90'>
  <nav class='mx-auto flex max-w-screen-xl flex-wrap items-center justify-between px-2 py-1 md:py-0'>
    <a href={navLinks[0].href} class='brand-text text-2xl font-bold'>FingeRate</a>
    <button
      id='hamburger'
      data-collapse-toggle='navbar-dropdown'
      type='button'
      class='inline-flex items-center rounded-lg p-2 text-sm text-neonBlue focus:outline-none focus:ring-2 focus:ring-blue-200 md:hidden'
      aria-controls='navbar-dropdown'
      aria-expanded='false'
    >
      <span class='sr-only'>Toggle navigation menu</span>
      <svg class='h-6 w-6' aria-hidden='true' fill='currentColor' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'
        ><path
          fill-rule='evenodd'
          d='M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z'
          clip-rule='evenodd'></path></svg
      >
    </button>
    <div class='hidden w-full md:block md:w-auto' id='navbar-dropdown'>
      <ul class='mt-4 flex flex-col items-center gap-2 md:m-0 md:flex-row md:items-baseline'>
        {
          navLinks.map((i) => (
            <li>
              {'links' in i ? (
                <>
                  <button
                    type='button'
                    id={`${i.name}-dropdownNavbarLink`}
                    data-dropdown-toggle={`${i.name}-dropdownNavbar`}
                    class:list={[
                      'hover:text-neonBlue flex w-full items-center gap-1  p-3 transition focus:outline-none focus:ring-2 focus:ring-blue-200',
                      {
                        'text-cyberLilac  border-cyberLilac md:border-b-2 ': i.links.some(
                          ({ href }) => href === currentUrl
                        ),
                      },
                    ]}
                    data-dropdown-trigger='hover'
                  >
                    {i.name}{' '}
                    <svg
                      class='h-5 w-5'
                      fill='currentColor'
                      aria-hidden='true'
                      viewBox='0 0 20 20'
                      xmlns='http://www.w3.org/2000/svg'
                    >
                      <path
                        fill-rule='evenodd'
                        d='M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z'
                        clip-rule='evenodd'
                      />
                    </svg>
                  </button>

                  <div id={`${i.name}-dropdownNavbar`} class='z-10 hidden w-44  rounded-lg bg-slate-900 shadow'>
                    <ul class='py-2 text-sm ' aria-labelledby={`${i.name}-dropdownNavbarLink`}>
                      {i.links.map((l) => (
                        <li class:list={{ 'border-cyberLilac border-l-2': currentUrl === l.href }}>
                          <a
                            href={l.href}
                            aria-current={currentUrl === l.href ? 'page' : null}
                            target={l.isExternal ? '_blank' : '_self'}
                            rel='noopener noreferrer'
                            class:list={[
                              'hover:text-neonBlue block px-4 py-2 transition',
                              { 'text-bold text-cyberLilac': currentUrl === l.href },
                            ]}
                          >
                            {l.name} {l.isExternal && 'â†—'}
                          </a>
                        </li>
                      ))}
                    </ul>
                  </div>
                </>
              ) : (
                <a
                  href={i.href}
                  target={i.isExternal ? '_blank' : ''}
                  aria-current={currentUrl === i.href ? 'page' : null}
                  rel='noopener noreferrer'
                  class:list={[
                    'hover:text-neonBlue   p-3 transition focus:outline-none focus:ring-2 flex items-center gap-1 focus:ring-blue-200',
                    { 'text-cyberLilac border-cyberLilac md:border-b-2': i.href === currentUrl },
                  ]}
                >
                  {i.name} {i.isExternal && <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class=" w-4 h-4">
  <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25" />
</svg>
}
                </a>
              )}
            </li>
          ))
        }
        <li>
          <div class="md:pl-4 md:border-l">
            {['en','ko'].map(lang =>  <a class:list={['text-sm px-2 rounded uppercase py-1 font-medium hover:underline', {'bg-intelligentBlue': lang === i18next.language}]} href={localizePath(Astro.url.pathname, lang)}>{lang}</a>)}
          </div>
     
        </li>
      </ul>
    </div>
  </nav>
</header>

<script>
  import { Collapse } from 'flowbite';

  // set the target element that will be collapsed or expanded (eg. navbar menu)
  const $targetEl = document.querySelector<HTMLDivElement>('#navbar-dropdown');

  // optionally set a trigger element (eg. a button, hamburger icon)
  const $triggerEl = document.querySelector<HTMLButtonElement>('#hamburger');

  // optional options with default values and callback functions
  // const options: CollapseOptions = {
  //   onCollapse: () => {
  //     console.log('element has been collapsed');
  //   },
  //   onExpand: () => {
  //     console.log('element has been expanded');
  //   },
  //   onToggle: () => {
  //     console.log('element has been toggled');
  //   },
  // };

  /*
   * $targetEl: required
   * $triggerEl: optional
   * options: optional
   */
  new Collapse($targetEl, $triggerEl);

  // show the target element
  // collapse.expand();
</script>
